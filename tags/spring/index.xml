<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on @stoptheworld99</title>
    <link>/tags/spring/</link>
    <description>Recent content in spring on @stoptheworld99</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sun, 09 Dec 2018 17:53:39 +0900</lastBuildDate>
    
	<atom:link href="/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[스프링 5.0 마스터] 6.1 예외처리</title>
      <link>/spring5.0/6/page-6-1/</link>
      <pubDate>Sun, 09 Dec 2018 17:53:39 +0900</pubDate>
      
      <guid>/spring5.0/6/page-6-1/</guid>
      <description>스프링 5.0 마스터 스터디 학습 내용 정리입니다.
1. 스프링 부트의 기본 예외처리  스프링부트의 기본 예외 형식은 throw 된 예외 메세지 와 함께 JSON 형태로 에러를 리턴한다. 브라우저경우 기본 오류 페이지 (Whilelabel Error Page) 를 출력한다.
{ &amp;#34;timestamp&amp;#34;: &amp;#34;2018-12-25T05:01:26.483+0000&amp;#34;, &amp;#34;status&amp;#34;: 500, &amp;#34;error&amp;#34;: &amp;#34;Internal Server Error&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;Some Exception Occurred&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;/users/dummy-service&amp;#34; }  2. 스프링 사용자 정의 예외처리 스프링에서는 오류에 대한 응답을 사용자가 정의하는 여러 옵션을 제공한다.
2.1 응답 메세지 사용자 정의 하기  주어진 ID 가 가지고 있는 todo 가 발견되지 않았을 때 발생시킬 사용자 정의 TodoNotFoundException 와 메세지 처리를 할 ExceptionResponse 객체를 생성한다.</description>
    </item>
    
    <item>
      <title>[스프링 5.0 마스터] 6.2 HATEOAS</title>
      <link>/spring5.0/6/page-6-2/</link>
      <pubDate>Sun, 09 Dec 2018 17:53:39 +0900</pubDate>
      
      <guid>/spring5.0/6/page-6-2/</guid>
      <description>REST 성숙도 모델 (Richardson Maturity Model) Richardson Maturity Model 에서는 Restful Web Service 를 다음의 단계로 나누어 성숙도를 정의하고 있다.
 Level 0 : 원격 프로시저 호출 (Remote Procedure Invocation) 에 기반한 형태로 resource 구분 없이 설계된 HTTP API  ex) http://server/getPosts, http://server/deletePosts, http://server/doThis, http://server/doThat 등
 Level 1 : resource 를 URI 통해 나타낸다. (명사 사용) 그러나, HTTP METHOD(GET,POST,PUT,DELETE 등) 사용하지 않는다.  ex) http://server/accounts, http://server/accounts/10
 Level 2 : resource 를 URI + HTTP Method 를 사용하여 접근한다.</description>
    </item>
    
    <item>
      <title>[스프링 5.0 마스터] 6.3 Bean Validation</title>
      <link>/spring5.0/6/page-6-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/spring5.0/6/page-6-3/</guid>
      <description>Bean Validation 데이터 유효성 검증 (Validation) 은 모든계층에서 공통적으로 발생하는 작업이다. 만약 모든 계층에서 동일한 내용의 Validation 로직이 각각의 레이어별로 구현되어 있다면 코드 중복과 함께 각 계층별로 중구난방으로 구현된 검증로직간 불일치로 인하여 오류가 발생하기도 쉽다.
이러한 Validation 중복을 피하기 위해 도메인의 검증 로직을 도메인 모델 자체에 묶어서 정의하기도 한다. 하지만 도메인 모델에 실제 코드로 Validation 로직을 표현한다면 도메인 모델 자체가 장황하지고 복잡해지게 된다.
Java 에서는 위와 같은 문제를 해결하기 위해 어노테이션을 통한 Entity 와 Method 를 검증하기 위한 API 를 제공하고 있다.</description>
    </item>
    
    <item>
      <title>[스프링 5.0 마스터] 6.4 Swagger</title>
      <link>/spring5.0/6/page-6-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/spring5.0/6/page-6-4/</guid>
      <description>REST 서비스 문서의 자동화  REST API 심플하게 설계되면 좋겠지만, 소비자의 요구사항 또는 서비스가 커짐에 따라 API 가 점점 복잡해지고 관리해야할 API 개수도 점점 늘게 된다. 협업을 위해서는 API 는 반드시 문서화 되어야 하는데, 소스 변경사항과 동기화 시키기가 매번 번거롭다. 이러한 문제를 해결하기 위해 REST API 서비스 문서(스펙)을 자동화 하는 툴이 등장하게 되었다.  주요 API Spec 자동화 라이브러리  SLATE : https://github.com/lord/slate Swagger : https://swagger.io/ API Blueprint : https://apiblueprint.</description>
    </item>
    
    <item>
      <title>[스프링 5.0 마스터] 6.5 Spring Security - Basic authentication</title>
      <link>/spring5.0/6/page-6-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/spring5.0/6/page-6-5/</guid>
      <description>스프링 시큐리티로 REST 서비스 보호 최근에는 서비스 시스템들끼리 REST API 기반의 통신이 많이 이루어지고 있다. 네이티브 앱과 서버 간 통신뿐만 아니라 자바스크립트 웹 클라이언트 와 서버간에도 REST API 통신을 많이 사용하기 때문에 REST 서비스(리소스) 에 대한 보안이 중요해 지고 있다.
보안에서 중요한 기본 개념 - 인증(Authentication) 과 권한 (Authorization)  소비자(클라이언트) 가 서비스(리소스) 에 접근이 가능한 소비자인지 ? 인증(Authentication) 접근이 가능하지만 해당 작업을 소비자(클라이언트) 에게 허용할것인지 ? 인가/권한부여(Authorization)  인증방식은 다양하며, 전통적인 인증방식으로는 사용자명(Principle)과 비밀번호(Credential) 로 인증하는 Credential 기반 인증 방식 과 OTP 등과 같이 추가적인 인증방식을 도입해 2가지 방법으로 인증하는 이중 인증 방식 과 최근에는 OAuth2 인증방식 도 필수적으로 사용되고 있다.</description>
    </item>
    
    <item>
      <title>[스프링 5.0 마스터] 6.6 Spring Security - OAuth 2.0</title>
      <link>/spring5.0/6/page-6-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/spring5.0/6/page-6-6/</guid>
      <description>OAuth2 인증  OAuth 2는 어플리케이션과 Facebook, GitHub 및 DigitalOcean 과 같은 HTTP 서비스의사용자 계정에 대한 제한된 액세스 권한을 얻을 수있게 해주는 인증 프레임 워크이다. 이는 사용자 계정을 호스팅하는 서비스에 사용자 인증을 위임하고 타사 응용 프로그램에 사용자 계정에 대한 액세스 권한을 부여하여 작동하게 된다. OAuth 2는 웹 및 데스크톱 응용 프로그램 및 모바일 장치에 대한 인증 흐름을 제공하게 된다.  다음은 일반적인 OAuth2 교환에 중요한 사용자이다  리소스 소유자 (사용자) : 리소스 소유자는 자신의 계정에 액세스하기 위해 어플리케이션 을 인증하는 사용자 이다.</description>
    </item>
    
    <item>
      <title>[스프링 5.0 마스터] 6.7 국제화</title>
      <link>/spring5.0/6/page-6-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/spring5.0/6/page-6-7/</guid>
      <description>국제화  국제화는 다양한 언어 및 문화권에 에서 사용할 수 있는 컨텐츠를 제공할 수 있도록 어플리케이션을 작성하는 것을 의미한다. 국제화(internationalization) 를 I18N이나 i18n으로, 현지화(localization)를 L10N이나 l10n 등으로 표기하기도 한다. 스프링 부트는 국제화를 위한 지원 기능을 내장하고 있다.
 스프링부트프로젝트에서 국제화 지원설정하기 1.1 Application.java 에 LocaleResolver 추가 @Bean public SessionLocaleResolver localResolver() { SessionLocaleResolver sessionLocaleResolver = new SessionLocaleResolver(); sessionLocaleResolver.setDefaultLocale(Locale.US); return sessionLocaleResolver; } @Bean public ResourceBundleMessageSource messageSource (){ ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource(); messageSource.</description>
    </item>
    
    <item>
      <title>[스프링 5.0 마스터] 6.8 캐싱</title>
      <link>/spring5.0/6/page-6-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/spring5.0/6/page-6-8/</guid>
      <description>캐싱  캐싱은 많은 시간이나 연산이 필요한 일데 대한 결과를 저장해 두는 것 이라고 할 수 있다. 서비스의 데이터 캐싱은 어플리케이션의 성능과 확장성을 향상시키는데 중요한 역할을 한다. 스프링은 어노테이션에 기반을 둔 캐싱 추상화를 제공한다. JSR-107(JCahce) 구현체 들은 모두 지원한다. EhCache, Hazelcast, Infinispan, Couchbase, Redis 등이 기본적으로 자동설정에 포함되어 있다.  스프링 부트 프로젝트에 캐싱 적용하기  1. 의존성 추가 spring-boot-starter-cache 를 pom.xml 또는 build.gradle 에 추가한다. 이 의존모듈을 추가하면 JSR-107 및 스프링 캐싱 어노테이션을 사용하는데 필요한 의존성이 생긴다.</description>
    </item>
    
    <item>
      <title>[스프링 5.0 마스터] 11.1 Reactive Programming</title>
      <link>/spring5.0/11/page-11-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/spring5.0/11/page-11-1/</guid>
      <description>1. 리액티브 시스템 새로운 디바이스 (모바일, 태블릿 등) real-time data 에 대한 수요 증가
 대량의 프로세스 처리 로드 발생 데이터 볼륨이 기하급수적으로 증가 인프라 유지 보수 비용 증가  1.1 Reactive 시스템 특징  Reactive manifesto : https://www.reactivemanifesto.org/ko   Reative Manifesto 는 다음 네 가지 핵심 원칙에 따라 Reactive System 의 특성을 개략적으로 설명하고 있다.
 반응성 (Responsive) : 모든 응답은 적시에 빠르고 일관된 대응을 제공하며 신뢰할수 있으며 일관된 서비스 품질을 제공한다.</description>
    </item>
    
  </channel>
</rss>